# STLWRT

This is the pre-alpha version of STLWRT, the graphical toolkit based on [GTK+](
https://www.gtk.org) 2 which aims to emulate GTK+ 3 and later versions as
necessary.  The user is presented with a traditional interface; the application
is presented with whatever application programming or binary interface it
prefers.  I have released this in hopes that I can obtain help from the
community and to prove to others who have challenged this project in the past
that this project is not "vaporware".

A detailed explanation of STLWRT's inner workings and the problems holding it
back follow.  Please note that the writing style of this document is not
intended to be particularly formal.

## The current (and future) state of GTK

As I write this in June 2020, GTK+ 2 is effectively dead (the last release,
2.24.32, has not been updated at all since 2018), GTK+ 3 is current (release
3.24.20 has just been produced), and GTK 4 is expected in "fall 2020".  GTK 4
is currently unstable as I write this and it is up to release 3.98.  GTK+ 3,
while an annoyance to many programmers who had to port their code, has many
things in common with GTK+ 2, believe it or not.  GTK 4 is a more drastic
deviation from older versions of GTK as far as I can tell at this time.  Some
of these deviations even threaten the very existence of traditional desktop
applications as we know them.  Some of these deviations are listed here:

 * Traditional popup menus such as those produced by consequence of the user
   clicking an item on a menu bar, such as "Edit", are to be eliminated.  They
   are to be replaced by popovers, better known as the primary onscreen elements
   behind the so-called "hamburger menus" used by touchscreen-based user
   interfaces.  Popovers make a traditional-style application look out of place,
   among other issues with popovers.  The reason for eliminating traditional
   menus is that traditional menus "relied on X11-centric concepts", which is
   not true at all -- almost all graphical display systems support menus in one
   way or another.
 
 * In GTK, special widgets called "containers" are used to hold one or more
   widgets and display them in a specific manner.  Some examples of containers
   include windows themselves and some otherwise invisible containers which
   are useful solely for position control, such as "boxes" and "grids".  In
   GTK+ 3 and earlier, all containers inherited properties and methods from
   the main container class, GtkContainer; this avoided duplication of code,
   since all containers have certain things in common with each other.  In GTK
   4, the main container class is to be removed and its code is to be placed
   *and repeated* inside every actual container widget's code.  From my
   perspective this causes unnecessary duplication of code.
 
 * Discrete toolbars are to be removed and replaced with generic container
   widgets such as boxes (GtkBox).  Apparently a CSS style class can be applied
   to these generic container widgets to make the container look like a toolbar
   as toolbars were traditionally drawn.  But in the past, the GTK developers
   have suggested an alternative way to do something and then in the next
   release of GTK required that the "alternative" way be used.  An example
   follows in the next bullet point:
   
 * In GTK+ 2, applications could just use GTK as a 
